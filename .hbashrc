# source $HOME/.hbashrc # to place in the .bashrc to source this custom additions.

# Easily accessing the bashrc from anywhere you want
alias hnanobashrc='nano $HOME/.bashrc'
alias hhnanobashrc='nano $HOME/.hbashrc'
alias hcodebashrc='code $HOME/.bashrc'
alias hhcodebashrc='code $HOME/.hbashrc'
alias hsourcebashrc='source $HOME/.bashrc'
alias hcatbashrc='cat $HOME/.bashrc'
alias hhcatbashrc='cat $HOME/.hbashrc'

# Git related
alias gs='git status'
alias gst='git stash'
alias gsp='git stash pop'
alias gd='git diff'
alias ga='git add'
alias gl='git log --oneline'
alias gb='git branch'
alias gcb='git checkout -b'
alias gaa='git add --all'
alias gm='git commit -m '
alias gp='git push'
alias gfp='git fetch --all && git pull'
alias ghome='cd `git rev-parse --show-toplevel`'
alias gsubmoduleinitrec='git submodule update --init --recursive'
alias greshead1='git reset HEAD~1' # undos the last commit
alias gcheckminus='git checkout -' # goes to the previous branch
alias gmergemaster='git checkout master && gfp && git checkout - && git merge master' # updates the master and merges it to the currently active branch
function hgmp() {
    if [ "$#" -ne 1 ]; then
        echo "Please provide a commit message for commiting and pushing in one line."
        echo "E.g.: hgmp \"my commit msg\""
        return -1
    else
        git commit -m "$1" && git push
    fi
}


# Python related
function cvenv() {
    # This function creates a python3.11 venv, updates pip and activates the venv.
    # The python version can be passed as an addional argument.

    python_version="3.11"
    venv_name=".venv"
    if [ "$#" -ne 1 ]; then
        echo "Using default python version of $python_version"
    else
        python_version="$1"
        if [[ "${python_version:1:1}" != "." ]]; then
            echo "Please provide a version number of python with format major.minor, e.g. 3.11."
            return -1
        fi
    fi

    if [ "$#" -eq 2 ]; then
        venv_name="$2"
        echo "Using venv name $venv_name"
    else
        echo "Using default venv name $venv_name"
    fi
    cmd="python$python_version -m venv $venv_name && source $venv_name/bin/activate && pip install -U pip"
    eval "$cmd"
}

function dvenv() {
    # This function removes the venv folder in the current directory.
    # When argument -y is given the folder will be directly removed.
    if [ "$#" -ne 1 ]; then
        printf 'Do you really want to remove the .venv and venv with "rm -rf .venv"? (y/n)\n'
        read answer
        if [ "$answer" != "${answer#[Yy]}" ]; then
            rm -rf .venv
            rm -rf venv
        fi
    elif [ "$1" == "-y" ]; then
        rm -rf .venv
        rm -rf venv
    fi
    deactivate
}

function avenv() {
    # This function activates the venv or .venv folder in the current directory.
    if [ "$#" -ne 1 ]; then
        source .venv/bin/activate
        if [ $? -eq 0 ]; then
            echo ".venv activated"
            return 0
        fi

        source venv/bin/activate
        if [ $? -eq 0 ]; then
            echo "venv activated"
            return 0
        fi

        echo "No venv found"
    else
        source "$1"/bin/activate
        if [ $? -eq 0 ]; then
            echo "$1 activated"
            return 0
        fi
        echo "Venv starting with $1 not found"
    fi
}

# alias avenv='source venv/bin/activate'                              # activate a venv
alias hpipdev='pip install -e .[dev]'                               # install venv via pip with dev-dependencies
alias hpipe='pip install -e .'                                      # installs package editable
alias hpipupdate='pip install -U pip'                                    # upgrades pip
alias htouchinitpy='touch __init__.py'                              # creates a __init__.py file
alias hpytest='pytest --disable-warnings'                           # executes pytest without the warnings
alias hpsuser='ps -u -a '                                           # 
alias hduone='du -h --max-depth=1 | sort -h'                        # prints folder storage for one level sorted by size
alias hcount='find . -type f | wc -l'                               # counts the number of files in the current dir
alias hcp='rsync -ah --info=progress2'                              # copys with a progess bar :)
alias hnvidiasmi='watch -n 1 nvidia-smi'                            # watching nvidia gpu load
